// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: api/v1/numbers.proto

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberServiceClient is the client API for NumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberServiceClient interface {
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
}

type numberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberServiceClient(cc grpc.ClientConnInterface) NumberServiceClient {
	return &numberServiceClient{cc}
}

func (c *numberServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.NumberService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberServiceServer is the server API for NumberService service.
// All implementations must embed UnimplementedNumberServiceServer
// for forward compatibility
type NumberServiceServer interface {
	Count(context.Context, *CountRequest) (*CountResponse, error)
	mustEmbedUnimplementedNumberServiceServer()
}

// UnimplementedNumberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNumberServiceServer struct {
}

func (UnimplementedNumberServiceServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedNumberServiceServer) mustEmbedUnimplementedNumberServiceServer() {}

// UnsafeNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberServiceServer will
// result in compilation errors.
type UnsafeNumberServiceServer interface {
	mustEmbedUnimplementedNumberServiceServer()
}

func RegisterNumberServiceServer(s grpc.ServiceRegistrar, srv NumberServiceServer) {
	s.RegisterService(&NumberService_ServiceDesc, srv)
}

func _NumberService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.NumberService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NumberService_ServiceDesc is the grpc.ServiceDesc for NumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.NumberService",
	HandlerType: (*NumberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _NumberService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/numbers.proto",
}
